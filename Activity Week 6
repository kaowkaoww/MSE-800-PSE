{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNRyAAtxg1Fk8v9L1coMuF/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U0xJI3HZFGyZ","executionInfo":{"status":"ok","timestamp":1747516236047,"user_tz":-720,"elapsed":8,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"144488b0-20cc-4427-c9e3-a832df0c44e9"},"outputs":[{"output_type":"stream","name":"stdout","text":["<zip object at 0x7e9260631480>\n"]}],"source":["name = ['Alice','Bob', 'Cathy']\n","ages = [25,30,35]\n","paired = zip(name,ages)\n","print(paired)"]},{"cell_type":"code","source":["name = ['Alice','Bob', 'Cathy']\n","ages = [25,30,35]\n","paired = list(zip(name,ages))\n","print(paired)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KO1dqzhMFbU4","executionInfo":{"status":"ok","timestamp":1747516261519,"user_tz":-720,"elapsed":9,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"1ec33464-840b-4a77-860d-b6bafa218d0d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["[('Alice', 25), ('Bob', 30), ('Cathy', 35)]\n"]}]},{"cell_type":"code","source":["name = ['Alice','Bob', 'Cathy']\n","ages = [25,30,35]\n","paired = dict(zip(name,ages))\n","print(paired)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fQ6C2D34GTJv","executionInfo":{"status":"ok","timestamp":1747516765602,"user_tz":-720,"elapsed":24,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"ccfa37ff-e00a-4126-ecbe-b5488d6e4342"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Alice': 25, 'Bob': 30, 'Cathy': 35}\n"]}]},{"cell_type":"code","source":["ids = [1,2,3]\n","names = ['Alice', 'Bob', 'Cathy', 'Mike']\n","Grades = ['A', 'B', 'A+','A']\n","\n","students = list(zip(ids,names,Grades))\n","print(students)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d-lpogZLHb0j","executionInfo":{"status":"ok","timestamp":1747516964986,"user_tz":-720,"elapsed":7,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"93dfe05e-8550-4b69-a0f1-ca225af58e8d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 'Alice', 'A'), (2, 'Bob', 'B'), (3, 'Cathy', 'A+')]\n"]}]},{"cell_type":"code","source":["#Develop a dictionary data structure using the following sample code (value should be a combination of two strings names and grades)\n","\n","ids = [1,2,3]\n","names = ['Alice', 'Bob', 'Cathy', 'Mike']\n","grades = ['A', 'B', 'A+','A']\n","\n","students = list(zip(ids,names,grades))\n","print(students)\n","\n","\n","students_dict = {id: f\"{name} ({grade})\" for id, name, grade in zip(ids,names,grades)}\n","print(\"DICT :\")\n","print(students_dict)\n","type(students_dict)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nbLTQVjwK8KZ","executionInfo":{"status":"ok","timestamp":1747519791910,"user_tz":-720,"elapsed":9,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"795506df-4b7b-497f-b1bb-6e266482befb"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 'Alice', 'A'), (2, 'Bob', 'B'), (3, 'Cathy', 'A+')]\n","DICT :\n","{1: 'Alice (A)', 2: 'Bob (B)', 3: 'Cathy (A+)'}\n"]},{"output_type":"execute_result","data":{"text/plain":["dict"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["ids = [1,2,3]\n","names = ['Alice', 'Bob', 'Cathy', 'Mike']\n","Grades = ['A', 'B', 'A+','A']\n","\n","zipped = zip(ids,names,Grades)\n","unzipped = list(zip(*zipped))\n","\n","print(unzipped)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0wusG6H8JjC6","executionInfo":{"status":"ok","timestamp":1747517422822,"user_tz":-720,"elapsed":8,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"cb8907c2-a3e7-4a66-b430-2a4d794908b5"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[(1, 2, 3), ('Alice', 'Bob', 'Cathy'), ('A', 'B', 'A+')]\n"]}]},{"cell_type":"code","source":["# extract information with age greater than 25 from the following list of dictionaries\n","data = [{\"name\": \"Alice\", \"age\": 28}, {\"name\": \"Bob\", \"age\": 24}, {\"name\": \"Charlie\", \"age\": 30}]\n","greater25 = [person for person in data if person[\"age\"] >25]\n","print(greater25)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9vTd5qFxKWE6","executionInfo":{"status":"ok","timestamp":1747518956698,"user_tz":-720,"elapsed":18,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"cc6168dc-45a6-4c72-9fb4-ccb254fd4e4e"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["[{'name': 'Alice', 'age': 28}, {'name': 'Charlie', 'age': 30}]\n"]}]},{"cell_type":"code","source":["# use list comprehension to flatten the matrix\n","matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n","flattened_metrix = [num for row in matrix for num in row]\n","print(flattened_metrix)\n","type(flattened_metrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dTOpN7R3P7x8","executionInfo":{"status":"ok","timestamp":1747519485488,"user_tz":-720,"elapsed":11,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"ecf55b08-6873-4c9f-fe93-250669175b24"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9]\n"]},{"output_type":"execute_result","data":{"text/plain":["list"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["#2ed idea for flatten the matrix using flatten()\n","#import numpy as np\n","\n","import numpy as np\n","matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n","res = matrix.flatten()\n","print(res)\n","type(res)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"43YmeuDMR-07","executionInfo":{"status":"ok","timestamp":1747519706369,"user_tz":-720,"elapsed":13,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"d6d4bbbd-b3ed-43fe-ff55-16998a564edd"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["[1 2 3 4 5 6 7 8 9]\n"]},{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["# use list comprehension to flatten the matrix\n","matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n","#submatrix in matrix will be [1,2,3], [4,5,6], [7,8,9] each\n","#and item of submatrix will be [1,2,3,4,5,6,7,8,9]\n","\n","flat=[item for submatrix in matrix for item in submatrix]\n","print(flat)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fBnkT6CGTIi3","executionInfo":{"status":"ok","timestamp":1747520042276,"user_tz":-720,"elapsed":18,"user":{"displayName":"Manisa T","userId":"16274744495590575353"}},"outputId":"27aca750-69eb-4721-a130-c2968067bddc"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9]\n"]}]}]}